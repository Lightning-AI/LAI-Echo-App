name: Deploy to lightning.ai
on:
  workflow_dispatch:
    inputs:
      recognizerMinReplicas:
        type: string
        default: "2"
        required: true
        description: "Minimum number of speech recognizer Works to keep running."
      youtuberMinReplicas:
        type: string
        default: "2"
        required: true
        description: "Minimum number of YouTube downloader Works to keep running."
      sourceTypeFileEnabled:
        type: boolean
        required: true
        default: false
        description: "Allow Echoes to be created from uploaded audio/video files."
      sourceTypeYouTubeEnabled:
        type: boolean
        required: true
        default: true
        description: "Allow Echoes to be created from YouTube URLs."
      sourceTypeRecordingEnabled:
        type: boolean
        required: true
        default: true
        description: "Allow Echoes to be created from device microphone recordings."
      appName:
        type: string
        required: true
        default: echo-prod
        description: "Change to deploy a new instance instead of updating the production instance."
      rootPath:
        type: choice
        required: true
        default: /echo
        options:
          - /echo
          - /
        description: "Select `/echo` for the production instance (served at `lightning.ai/echo`). Otherwise, select `/`."
      modelSize:
        type: choice
        required: true
        default: tiny
        options:
          - tiny
          - base
          - small
          - medium
          - large
        description: "Whisper model size."
      loadbalancerAuthToken:
        type: string
        required: true
        description: "Token used to authenticate against the `/v1/scale` API endpoint."
      fileserverAuthToken:
        type: string
        required: true
        description: "Token used to authenticate against the fileserver `/delete/{echoID}` endpoint."
jobs:
  build:
    runs-on: ubuntu-20.04
    timeout-minutes: 35
    steps:
      - name: Print inputs
        run: echo "${{ toJSON(github.event.inputs) }}"
      - uses: actions/checkout@v3.1.0
      - uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.LIGHTNING_UI_SSH_KEY }}
      - uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
      - name: Install frontend dependencies
        run: cd echo/ui && yarn install
      - name: Build frontend
        run: cd echo/ui && yarn build
        env:
          PUBLIC_URL: https://storage.googleapis.com/lightning-echo-prod/build
          REACT_APP_ECHO_ROOT_PATH: ${{ inputs.rootPath }}
          REACT_APP_ECHO_SHOW_BANNER: "true"
          REACT_APP_ECHO_SOURCE_TYPE_FILE_ENABLED: "${{ inputs.sourceTypeFileEnabled }}"
          REACT_APP_ECHO_SOURCE_TYPE_RECORDING_ENABLED: "${{ inputs.sourceTypeRecordingEnabled }}"
          REACT_APP_ECHO_SOURCE_TYPE_YOUTUBE_ENABLED: "${{ inputs.sourceTypeYouTubeEnabled }}"
          REACT_APP_ECHO_VIDEO_SOURCE_MAX_DURATION_SECONDS: 300
          REACT_APP_ECHO_RECORDING_SOURCE_MAX_DURATION_SECONDS: 60
          REACT_APP_ECHO_USER_ECHOES_LIMIT: 3
          REACT_APP_ECHO_GARBAGE_COLLECTION_MAX_AGE_SECONDS: 84600
          REACT_APP_ECHO_SENTRY_DSN: ${{ secrets.ECHO_SENTRY_DSN }}
      - name: Upload frontend build to GitHub
        uses: actions/upload-artifact@v1
        with:
          name: echo-frontend-build
          path: echo/ui/build
      - name: Upload frontend build to GCS
        uses: google-github-actions/upload-cloud-storage@v0
        with:
          path: echo/ui/build
          destination: lightning-echo-prod
  deploy:
    runs-on: ubuntu-20.04
    needs: build
    steps:
      - uses: actions/checkout@v3.1.0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install Python dependencies
        run: |
          pip --version
          pip install -r requirements.txt --quiet
          pip list
        shell: bash
      - name: Retrieve frontend build
        uses: actions/download-artifact@v1
        with:
          name: echo-frontend-build
          path: echo/ui/build
      - name: Deploy
        env:
          LIGHTNING_USER_ID: ${{ secrets.LIGHTNING_USER_ID }}
          LIGHTNING_API_KEY: ${{ secrets.LIGHTNING_API_KEY }}
          LIGHTNING_CLOUD_PROJECT_ID: ${{ secrets.LIGHTNING_CLOUD_PROJECT_ID }}
        run: |
          lightning run app app.py \
            --cloud \
            --no-cache \
            --cluster-id ${{ secrets.LIGHTNING_CLUSTER_ID }} \
            --name "${{ inputs.appName }}" \
            --open-ui false \
            --env ECHO_MODE=production \
            --env ECHO_MODEL_SIZE=${{ inputs.modelSize }} \
            --env ECHO_WHISPER_CPP_HOME=/content/whisper.cpp \
            --env ECHO_ENABLE_MULTI_TENANCY=true \
            --env ECHO_RECOGNIZER_MIN_REPLICAS=${{ inputs.recognizerMinReplicas }} \
            --env ECHO_RECOGNIZER_MAX_IDLE_SECONDS_PER_WORK=120 \
            --env ECHO_RECOGNIZER_MAX_PENDING_CALLS_PER_WORK=50 \
            --env ECHO_RECOGNIZER_AUTOSCALER_CRON_SCHEDULE_DEFAULT="*/5 * * * *" \
            --env ECHO_RECOGNIZER_CLOUD_COMPUTE=cpu-small \
            --env ECHO_FILESERVER_CLOUD_COMPUTE=cpu \
            --env ECHO_FILESERVER_AUTH_TOKEN=${{ inputs.fileserverAuthToken }} \
            --env ECHO_YOUTUBER_MIN_REPLICAS=${{ inputs.youtuberMinReplicas }} \
            --env ECHO_YOUTUBER_MAX_IDLE_SECONDS_PER_WORK=120 \
            --env ECHO_YOUTUBER_MAX_PENDING_CALLS_PER_WORK=50 \
            --env ECHO_YOUTUBER_AUTOSCALER_CRON_SCHEDULE_DEFAULT="*/5 * * * *" \
            --env ECHO_YOUTUBER_CLOUD_COMPUTE=cpu-small \
            --env ECHO_USER_ECHOES_LIMIT=3 \
            --env ECHO_SOURCE_TYPE_FILE_ENABLED=${{ inputs.sourceTypeFileEnabled }} \
            --env ECHO_SOURCE_TYPE_RECORDING_ENABLED=${{ inputs.sourceTypeRecordingEnabled }} \
            --env ECHO_SOURCE_TYPE_YOUTUBE_ENABLED=${{ inputs.sourceTypeYouTubeEnabled }} \
            --env ECHO_GARBAGE_COLLECTION_CRON_SCHEDULE="*/30 * * * *" \
            --env ECHO_GARBAGE_COLLECTION_MAX_AGE_SECONDS=86400 \
            --env ECHO_SENTRY_DSN=${{ secrets.ECHO_SENTRY_DSN }} \
            --env ECHO_VIDEO_SOURCE_MAX_DURATION_SECONDS=300 \
            --env ECHO_DATABASE_CLOUD_COMPUTE=cpu-small \
            --env ECHO_ROOT_PATH=${{ inputs.rootPath }} \
            --env ECHO_LOADBALANCER_AUTH_TOKEN=${{ inputs.loadbalancerAuthToken }} \
            --env ECHO_ANALYTICS_ENABLED=true \
        shell: bash
